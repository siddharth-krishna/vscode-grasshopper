{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Grasshopper",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "name": "string.quoted.double.untitled",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.untitled"
                }
            ]
        },
        {
            "name": "comment.block.grasshopper",
            "begin": "/\\*",
            "end": "\\*/"
        },
        {
            "name": "comment.line.double-slash.grasshopper",
            "match": "(//).*$\\n?"
        },
        {
            "name": "storage.type.modifier.tag.grasshopper",
            "match": "<[\\w\\s,]+>"
        },
        {
            "include": "#constants-and-special-vars"
        },
        {
            "match": "(\\b(function|predicate|define|lemma)\\b)(\\s+)((\\w|\\?)*)",
            "name": "meta.function.grasshopper",
            "captures": {
                "2": {
                    "name": "storage.type.declaration.grasshopper"
                },
                "4" : {
                    "name": "entity.name.function.grasshopper"
                }
            }
        },
        {
            "match": ";",
            "name": "punctuation.terminator.grasshopper"
        }
    ],
    "repository": {
        "constants-and-special-vars": {
            "patterns": [
                {
                    "name": "constant.language.boolean.bpl",
                    "match": "(?<![\\w$.])(true|false)(?![\\w$.])"
                },
                {
                    "name": "constant.numeric.integer.bpl",
                    "match": "(?<![\\w$.])[0-9]+(?![\\w$.])"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "storage.type.declaration.grasshopper",
                    "match": "\\b(axiom|const|lemma|procedure|type|datatype|struct|var|options|include|define)\\b"
                },
                {
                    "name": "storage.type.grasshopper",
                    "match": "(?<![\\w$.])(int|bool|real|bv[0-9]+)(?![\\w$.])"
                },
                {
                    "name": "storage.modifier.grasshopper",
                    "match": "(?<![\\w$.])(auto)(?![\\w$.])"
                },
                {
                    "name": "keyword.control.grasshopper",
                    "match": "\\b(while|return)\\b"
                },
                {
                    "name": "keyword.control.conditional.grasshopper",
                    "match": "\\b(if|then|else)\\b"
                },
                {
                    "name": "keyword.control.statement.grasshopper",
                    "match": "\\b(pure|assert|assume|with|havoc|requires|ensures|modifies|returns|invariant|matching|yields)\\b"
                },
                {
                    "name": "keyword.operator.assignment.grasshopper",
                    "match": "(:=)"
                },
                {
                    "name": "keyword.other.old.grasshopper",
                    "match": "\\bold\\b"
                },
                {
                    "name": "keyword.other.logical.quantifier.grasshopper",
                    "match": "\\b(forall|exists)\\b"
                },
                {
                    "name": "keyword.operator.logical.grasshopper",
                    "match": "::"
                },
                {
                    "name": "keyword.operator.logical.unary.grasshopper",
                    "match": "!|:"
                },
                {
                    "name": "keyword.operator.logical.binary.grasshopper",
                    "match": "<==>|==>|&&|\\|\\|"
                },
                {
                    "name": "keyword.operator.comparison.grasshopper",
                    "match": "==|!=|<=|>=|<:|<|>"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.grasshopper",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.grasshopper",
                    "match": "\\\\."
                }
            ]
        }
    },
    "scopeName": "source.grasshopper"
}